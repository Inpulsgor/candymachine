{"version":3,"file":"static/js/608.877cddfb.chunk.js","mappings":"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","sources":["../node_modules/@project-serum/sol-wallet-adapter/dist/esm/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\nexport default class Wallet extends EventEmitter {\n    constructor(provider, _network) {\n        super();\n        this._network = _network;\n        this._publicKey = null;\n        this._popup = null;\n        this._handlerAdded = false;\n        this._nextRequestId = 1;\n        this._autoApprove = false;\n        this._responsePromises = new Map();\n        this.handleMessage = (e) => {\n            var _a;\n            if ((this._injectedProvider && e.source === window) ||\n                (e.origin === ((_a = this._providerUrl) === null || _a === void 0 ? void 0 : _a.origin) && e.source === this._popup)) {\n                if (e.data.method === 'connected') {\n                    const newPublicKey = new PublicKey(e.data.params.publicKey);\n                    if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\n                        if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\n                            this.handleDisconnect();\n                        }\n                        this._publicKey = newPublicKey;\n                        this._autoApprove = !!e.data.params.autoApprove;\n                        this.emit('connect', this._publicKey);\n                    }\n                }\n                else if (e.data.method === 'disconnected') {\n                    this.handleDisconnect();\n                }\n                else if (e.data.result || e.data.error) {\n                    const promises = this._responsePromises.get(e.data.id);\n                    if (promises) {\n                        const [resolve, reject] = promises;\n                        if (e.data.result) {\n                            resolve(e.data.result);\n                        }\n                        else {\n                            reject(new Error(e.data.error));\n                        }\n                    }\n                }\n            }\n        };\n        this._beforeUnload = () => {\n            void this.disconnect();\n        };\n        if (isInjectedProvider(provider)) {\n            this._injectedProvider = provider;\n        }\n        else if (isString(provider)) {\n            this._providerUrl = new URL(provider);\n            this._providerUrl.hash = new URLSearchParams({\n                origin: window.location.origin,\n                network: this._network,\n            }).toString();\n        }\n        else {\n            throw new Error('provider parameter must be an injected provider or a URL string.');\n        }\n    }\n    handleConnect() {\n        var _a;\n        if (!this._handlerAdded) {\n            this._handlerAdded = true;\n            window.addEventListener('message', this.handleMessage);\n            window.addEventListener('beforeunload', this._beforeUnload);\n        }\n        if (this._injectedProvider) {\n            return new Promise((resolve) => {\n                void this.sendRequest('connect', {});\n                resolve();\n            });\n        }\n        else {\n            window.name = 'parent';\n            this._popup = window.open((_a = this._providerUrl) === null || _a === void 0 ? void 0 : _a.toString(), '_blank', 'location,resizable,width=460,height=675');\n            return new Promise((resolve) => {\n                this.once('connect', resolve);\n            });\n        }\n    }\n    handleDisconnect() {\n        if (this._handlerAdded) {\n            this._handlerAdded = false;\n            window.removeEventListener('message', this.handleMessage);\n            window.removeEventListener('beforeunload', this._beforeUnload);\n        }\n        if (this._publicKey) {\n            this._publicKey = null;\n            this.emit('disconnect');\n        }\n        this._responsePromises.forEach(([, reject], id) => {\n            this._responsePromises.delete(id);\n            reject(new Error('Wallet disconnected'));\n        });\n    }\n    sendRequest(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (method !== 'connect' && !this.connected) {\n                throw new Error('Wallet not connected');\n            }\n            const requestId = this._nextRequestId;\n            ++this._nextRequestId;\n            return new Promise((resolve, reject) => {\n                var _a, _b, _c, _d;\n                this._responsePromises.set(requestId, [resolve, reject]);\n                if (this._injectedProvider) {\n                    this._injectedProvider.postMessage({\n                        jsonrpc: '2.0',\n                        id: requestId,\n                        method,\n                        params: Object.assign({ network: this._network }, params),\n                    });\n                }\n                else {\n                    (_a = this._popup) === null || _a === void 0 ? void 0 : _a.postMessage({\n                        jsonrpc: '2.0',\n                        id: requestId,\n                        method,\n                        params,\n                    }, (_c = (_b = this._providerUrl) === null || _b === void 0 ? void 0 : _b.origin) !== null && _c !== void 0 ? _c : '');\n                    if (!this.autoApprove) {\n                        (_d = this._popup) === null || _d === void 0 ? void 0 : _d.focus();\n                    }\n                }\n            });\n        });\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    get connected() {\n        return this._publicKey !== null;\n    }\n    get autoApprove() {\n        return this._autoApprove;\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._popup) {\n                this._popup.close();\n            }\n            yield this.handleConnect();\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._injectedProvider) {\n                yield this.sendRequest('disconnect', {});\n            }\n            if (this._popup) {\n                this._popup.close();\n            }\n            this.handleDisconnect();\n        });\n    }\n    sign(data, display) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(data instanceof Uint8Array)) {\n                throw new Error('Data must be an instance of Uint8Array');\n            }\n            const response = (yield this.sendRequest('sign', {\n                data,\n                display,\n            }));\n            const signature = bs58.decode(response.signature);\n            const publicKey = new PublicKey(response.publicKey);\n            return {\n                signature,\n                publicKey,\n            };\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = (yield this.sendRequest('signTransaction', {\n                message: bs58.encode(transaction.serializeMessage()),\n            }));\n            const signature = bs58.decode(response.signature);\n            const publicKey = new PublicKey(response.publicKey);\n            transaction.addSignature(publicKey, signature);\n            return transaction;\n        });\n    }\n    signAllTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = (yield this.sendRequest('signAllTransactions', {\n                messages: transactions.map((tx) => bs58.encode(tx.serializeMessage())),\n            }));\n            const signatures = response.signatures.map((s) => bs58.decode(s));\n            const publicKey = new PublicKey(response.publicKey);\n            transactions = transactions.map((tx, idx) => {\n                tx.addSignature(publicKey, signatures[idx]);\n                return tx;\n            });\n            return transactions;\n        });\n    }\n    diffieHellman(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(publicKey instanceof Uint8Array)) {\n                throw new Error('Data must be an instance of Uint8Array');\n            }\n            const response = (yield this.sendRequest('diffieHellman', {\n                publicKey,\n            }));\n            return response;\n        });\n    }\n}\nfunction isString(a) {\n    return typeof a === 'string';\n}\nfunction isInjectedProvider(a) {\n    return (isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function');\n}\nfunction isObject(a) {\n    return typeof a === 'object' && a !== null;\n}\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Wallet","provider","_network","a","_publicKey","_popup","_handlerAdded","_nextRequestId","_autoApprove","_responsePromises","Map","handleMessage","_a","_injectedProvider","source","window","origin","_providerUrl","data","method","newPublicKey","PublicKey","params","publicKey","equals","handleDisconnect","autoApprove","emit","error","promises","get","id","Error","_beforeUnload","disconnect","isObject","postMessage","isString","URL","hash","URLSearchParams","location","network","toString","this","addEventListener","sendRequest","name","open","once","removeEventListener","forEach","delete","connected","requestId","_b","_c","_d","set","jsonrpc","Object","assign","focus","close","handleConnect","display","Uint8Array","response","signature","bs58","transaction","message","serializeMessage","addSignature","transactions","messages","map","tx","signatures","s","idx","EventEmitter"],"sourceRoot":""}